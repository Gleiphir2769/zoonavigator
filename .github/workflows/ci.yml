name: CI

on:
  push:
    branches:
      - master
      - feature/github-actions
      - feature/snap
    tags:
      - '*'

jobs:
  test-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Test
        run: docker-compose -f $GITHUB_WORKSPACE/zoonavigator-api/docker-compose.test.yml up --exit-code-from=sut

  test-web:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Test
        run: docker-compose -f $GITHUB_WORKSPACE/zoonavigator-web/docker-compose.test.yml up --exit-code-from=sut

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get version
        id: version
        uses: battila7/get-version-action@v2

      - name: Get metadata
        run: |
          TAG="${{ steps.get_version.outputs.version-without-v }}"

          # is this a tagged push?
          if [[ -z "$TAG" ]];
          then
              APP_VERSION=latest-${GITHUB_SHA::12}
              DOCKER_TAG="latest"
          else
              APP_VERSION=$TAG
              DOCKER_TAG=$TAG
          fi

          # set image name
          IMAGE_NAME="elkozmon/zoonavigator:${DOCKER_TAG}"

          # is docker tag semver?
          if [[ $DOCKER_TAG =~ ^[0-9]+(\.[0-9]+){2,3}$ ]];
          then
              DOCS_URL="https://zoonavigator.elkozmon.com/en/${DOCKER_TAG}"
          else
              DOCS_URL="https://zoonavigator.elkozmon.com/en/latest"
          fi

          echo "" > metadata.env
          echo "DOCKER_TAG=${DOCKER_TAG}" >> metadata.env
          echo "APP_VERSION=${APP_VERSION}" >> metadata.env
          echo "IMAGE_NAME=${IMAGE_NAME}" >> metadata.env
          echo "DOCS_URL=${DOCS_URL}" >> metadata.env

      - name: Build Docker image
        run: |
          source metadata.env

          docker build \
            --build-arg APP_VERSION=$APP_VERSION \
            --build-arg DOCS_URL=$DOCS_URL \
            --build-arg VCS_REF=$(git rev-parse --short HEAD) \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            -t ${IMAGE_NAME} \
            -f build/docker/Dockerfile \
            .

          docker save ${IMAGE_NAME} \
            > dockerimage.tar

      - name: Package jars
        run: |
          source metadata.env

          mkdir out
          id=$(docker create $IMAGE_NAME)
          docker cp $id:/app/lib out/lib
          docker cp $id:/app/extra out/extra
          docker rm $id

          tar -cvzf jars.tar.gz out
          rm -rf out

      - name: Upload metadata
        uses: actions/upload-artifact@v1
        with:
          name: metadata
          path: metadata.env

      - name: Upload jars
        uses: actions/upload-artifact@v1
        with:
          name: jars
          path: jars.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v1
        with:
          name: dockerimage
          path: dockerimage.tar

  publish-docker:
    runs-on: ubuntu-latest

    needs:
      - test-api
      - test-web
      - build

    steps:
      - name: Download metadata
        uses: actions/download-artifact@v1
        with:
          name: metadata

      - name: Download Docker image
        uses: actions/download-artifact@v1
        with:
          name: dockerimage

      - name: Docker Load
        run: docker load --input dockerimage/dockerimage.tar

      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Docker Push
        run: |
          source metadata/metadata.env

          docker push ${IMAGE_NAME}

      - name: Microbadger webhook
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.MICROBADGER_WEBHOOK_URL }}

  publish-snap:
    runs-on: ubuntu-latest

    needs:
      - test-api
      - test-web
      - build

    steps:
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: jars

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        with:
          snapcraft_token: ${{ secrets.SNAPCRAFT_TOKEN }}

      - name: Snap Build
        run: |
          echo TODO

      - name: Snap Push
        run: |
          echo TODO
